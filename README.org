#+TITLE:Rebâ€”regex-based Brainfuck toolkit

Reb is a CLI tool for working with Brainfuck. Right now, it supports:
- Code minification and formatting.
- Pattern optimization.
- Compilation to C.
- And evaluation of both Brainfuck and optimized code format.

The catch is: it's all regex.
The goal of the project is to use regex as much as possible.
Though the evaluation is not based on regular expressions.
Minification and optimization are, at least.

* Getting started

You only need to clone the repo:

#+begin_src sh
git clone https://github.com/aartaka/reb
#+end_src

and run
#+begin_src sh
make all
#+end_src

in the checked-out directory.
After that, you'll have an executable called =reb= around.
Use it:

* Usage

There are five main commands in Reb:
- m :: minification.
- f :: formatting (as per [[https://github.com/bf-enterprise-solutions/bf.style][bf.style]].)
- o :: optimization.
- r :: evaluation (from "run").
- c :: compilation to C.

Either of these is invoked as a prefix following the executable name.
I.e., minifying =file.bf= into =file.min.bf= is:
#+begin_src sh
./reb m file.bf > file.min.bf
#+end_src

You can see the (ab)use of shell redirection here.
Reb is intended to fit the UNIX-y model of tools' interation.
Want to evaluate output of some command? Pipe it to =./reb r --= (where =--= stands for stdin).
Want to save the optimized code to a file? Use output redirection.
Want to have a pipeline of minification+optimization+evaluation?
You can do that:
#+begin_src sh
  ./reb m file.bf | ./reb o -- | ./reb r --
#+end_src

(although it will be slow.
So you better split the stages and run the minified/optimized file when it's ready.)

And then, you can also compile to C and use your favorite C compiler to get near-native speed:
#+begin_src sh
  ./reb c file.min.bf > file.c
  gcc file.c -O3 -o file
#+end_src


* Optimized Code Specification (WIP)

** Monadic commands
- [, ], ., , :: Like in Brainfuck
- +, -, <, > :: Like in Brainfuck, except they can have a numeric argument specifying how many times to repeat them.
- = :: Set the contents of the cell to numeric argument.

** Diadic commands
- offset`multiplier{ and offset`multiplier} :: Copy to the left and copy to the right respectively. ~offset~ defines how far (= number of cells) to copy the data, ~multiplier~ defines how to scale this data.
- step`value( and step`value) :: Scan the memory (to the left and right respectively) for ~value~ cells and stop there, nulling them. ~step~ defines how many cells to skip through.

* History

Reb is a sequel to [[https://github.com/aartaka/sade][Sade]], my Brainfuck-to-Lisp optimizing compiler.
While Sade is quite fast and nice to use...
The way optimizations are implemented is quite hard to maintain.
So I figured that this optimization of Brainfuck command patterns is a good use for regex.
Here we are: Reb is a tool utilizing regex to minify, compile, and parse Brainfuck code.
Success. Alpplause. Bring down the curtain.
